---
title: "Generate INNER calibration"
author: "John Curtin & Claire Punturieri"
date: "`r lubridate::today()`"
output: 
  html_document:
    toc: true 
    toc_depth: 4
format:
  html:
    embed-resources: true
params:
  study: "gps"
  version: "v5"
  cv: "nested_1_x_10_3_x_10"
  algorithms: "xgboost"   # "all" or name of specific algorithm
  model: "main"
editor_options: 
  chunk_output_type: console
---

```{r}
study <- params$study
cv <- params$cv
model <- params$model
algorithms <- params$algorithms
version <- params$version
```

Function conflicts
```{r, packages_workflow}
#| message: false
#| warning: false

# source
devtools::source_url("https://github.com/jjcurtin/lab_support/blob/main/fun_ml.R?raw=true")

# handle conflicts
options(conflicts.policy = "depends.ok")
tidymodels_conflictRules()
```

Packages for script
```{r, packages_script}
#| message: false
#| warning: false

library(tidyverse)
library(tidymodels)
library(probably)
```

Path
```{r}
path_processed <- format_path(str_c("studydata/risk/data_processed/", study))

```

## Functions
```{r}
get_brier <- function(split_num, df){
  
  #filter to split
  probs_split <- df |> 
  filter(outer_split_num == split_num)

  raw <- probs_split |>
    filter(method == "prob_raw") |> 
    brier_class(label, .pred_Lapse)
  
  logi <- probs_split |>
    filter(method == "prob_logi") |> 
    brier_class(label, .pred_Lapse)
  
  iso <- probs_split |>
    filter(method == "prob_iso") |> 
    brier_class(label, .pred_Lapse)
  
  beta <- probs_split |>
    filter(method == "prob_beta") |> 
    brier_class(label, .pred_Lapse)
  
  brier <- tibble(raw = raw$.estimate, 
                logi = logi$.estimate, 
                iso = iso$.estimate, 
                beta = beta$.estimate)
  return(brier)
}

```

## Get Probs

```{r}
probs <- read_rds(file.path(path_processed, str_c("inner_predictions.rds"))) |>
  # cp added mutate, guessing we need this?
  mutate(label = truth) |> 
  pivot_longer(cols = starts_with("prob"), 
               names_to = "method", 
               values_to = ".pred_Lapse") |>
  glimpse()
```


## Brier Scores

> CP: this returns NaNs right now. I think the issue is that get_brier is looking for a column `method` with different types of probabilities -- raw, logi, iso, and beta. Right now there is only a general prob?

```{r}

brier <- 1:30 |> 
  map(\(split_num) get_brier(split_num, probs)) |> 
  list_rbind()

brier |> head()

brier |> summarize(across(everything(), list(mean, median)))
                      
```




## Explore Plots
```{r}

probs |> 
  filter(outer_split_num == 1) |> 
  cal_plot_breaks(truth = label, 
                  estimate = .pred_Lapse,
                  .by = method)
  
probs |> 
  filter(outer_split_num == 1) |> 
  cal_plot_windowed(truth = label, 
                  estimate = .pred_Lapse,
                  .by = method)

```

#### ROC curve
- This is single ROC by concatenating all outer folds.

> CP: not sure if this is the appropriate probability measure, but code works!

```{r roc_info}
#preds_out %>%
  #roc_auc(prob_beta, truth = label)

#roc_data <- preds_out %>% 
  #roc_curve(prob_beta, truth = label)

roc_data <- probs |> 
  roc_curve(prob, truth = truth)
  
roc_data |>  
  ggplot(aes(x = 1 - specificity, y = sensitivity, color = .threshold)) +
  geom_path(linewidth = 2) +
  geom_abline(lty = 3) +
  coord_fixed(xlim = c(0, 1), ylim = c(0, 1)) +
  labs(x = "Specificity",
       y = "Sensitivity") +
  scale_x_continuous(breaks = seq(0,1,.25),
    labels = sprintf("%.2f", seq(1,0,-.25))) +
  scale_color_gradient(low="blue", high="red") +
  theme(axis.text = element_text(size = rel(1.50)), 
        axis.title = element_text(size = rel(1.75)))
```

And these are the curves for each outer fold
```{r}
# rocs per fold
#roc_folds <- preds_out %>%
  #nest(.by = outer_split_num, .key = "preds") |> 
  #mutate(roc = map(preds, \(preds) roc_curve(preds, prob_beta, 
                                             #truth = label)))
roc_folds <- probs %>%
  nest(.by = outer_split_num, .key = "preds") |> 
  mutate(roc = map(preds, \(preds) roc_curve(preds, prob, 
                                             truth = truth)))

fig_roc_folds <- roc_data %>%  # plot region from full concatenated data 
  ggplot(aes(x = 1 - specificity, y = sensitivity)) + 
  geom_abline(lty = 3) +
  coord_fixed(xlim = c(0, 1), ylim = c(0, 1)) +
  labs(x = "Specificity",
       y = "Sensitivity") +
  scale_x_continuous(breaks = seq(0,1,.25),
    labels = sprintf("%.2f", seq(1,0,-.25))) +
  theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank())
  
for (i in 1:nrow(roc_folds)) {
  fig_roc_folds <- fig_roc_folds +
     geom_path(data = roc_folds$roc[[i]],
               mapping = aes(x = 1 - specificity, y = sensitivity),
               color = "gray")
}

#add full concatenated curve
fig_roc_folds +
     geom_path(data = roc_data,
               mapping = aes(x = 1 - specificity, y = sensitivity, color = .threshold),
               linewidth = 2) +
    scale_color_gradient(low="blue", high="red")
```

