---
title: "Validation set calibration"
author: "John Curtin & Claire Punturieri"
date: "`r lubridate::today()`"
output: 
  html_document:
    toc: true 
    toc_depth: 4
format:
  html:
    embed-resources: true
params:
  study: "gps"
  version: "v6"
  cv: "nested_1_x_10_3_x_10"
  algorithms: "xgboost"   # "all" or name of specific algorithm
  model: "main"
  window: "1day"
editor_options: 
  chunk_output_type: console
---

```{r}
study <- params$study
cv <- params$cv
model <- params$model
algorithms <- params$algorithms
version <- params$version
window <- params$window
```



Function conflicts


```{r, packages_workflow}
#| message: false
#| warning: false

# source
devtools::source_url("https://github.com/jjcurtin/lab_support/blob/main/fun_ml.R?raw=true")
devtools::source_url("https://github.com/jjcurtin/lab_support/blob/main/format_path.R?raw=true")

# handle conflicts
options(conflicts.policy = "depends.ok")
tidymodels_conflictRules()
```



Packages for script


```{r, packages_script}
#| message: false
#| warning: false

library(tidyverse)
library(tidymodels)
library(probably)
library(yardstick)
```



Path


```{r}
path_models <- format_path(str_c("studydata/risk/models/", study))

```



## Functions


```{r}
get_brier <- function(split, df){
  
  #filter to split
  probs_split <- df |> 
    filter(split_num == split)

  raw <- probs_split |>
    filter(method == "prob_raw") |> 
    brier_class(label, .pred_Lapse)
  
  logi <- probs_split |>
    filter(method == "prob_logi") |> 
    brier_class(label, .pred_Lapse)
  
  iso <- probs_split |>
    filter(method == "prob_iso") |> 
    brier_class(label, .pred_Lapse)
  
  #beta <- probs_split |>
    #filter(method == "prob_beta") |> 
    #brier_class(label, .pred_Lapse)
  
  brier <- tibble(raw = raw$.estimate, 
                 logi = logi$.estimate, 
                 iso = iso$.estimate) 
  #               beta = beta$.estimate)
  
  #brier <- tibble(raw = raw$.estimate)
  
  return(brier)
}

```



## Get Probs



```{r}
probs <- read_rds(here::here(path_models,
                             str_c("inner_preds_", window, "_", version, "_",
                                         cv, "_", model, ".rds"))) |>
  mutate(split_num = 10 * outer_split_num + (inner_split_num - 10)) |> 
  pivot_longer(cols = starts_with("prob"), 
               names_to = "method", 
               values_to = ".pred_Lapse") |>
  glimpse()
```




## Brier Scores



```{r}

brier <- 1:300 |>
  map(\(split_num) get_brier(split_num, probs)) |> 
  list_rbind()

brier |> head()

brier |> summarize(across(everything(), list(mean, median)))
                      
```



## Explore Plots
Raw and logi


```{r}
#| label: fig-calibration
#| fig-cap: Comparison between raw (uncalibrated) and logistic (calibrated) probabilities. Predicted lapse probability represents the predicted probabilities derived from the model, whereas observed lapse rate reflects the true rate of lapses in the data. The dashed y = x line represents perfect performance, where predicted probabilities reflect true probabilities. Each point represents the midpoint of a given bin, which increase by 10% (i.e., 5% represents the midpoint from 0-10%).
#| fig-height: 4
#| fig-width: 6
cols <- c("prob_raw" = "#FF9898FF", "prob_logi" = "#A91E45FF")

probs |>
  mutate(.pred_lapse = .pred_Lapse) |>
  filter(method == "prob_raw" | method == "prob_logi") |> 
  cal_plot_breaks(truth = label, 
                  estimate = .pred_lapse,
                  .by = method) +
  scale_color_manual(values = cols,
                     aesthetics = c("color", "fill")) +
  ylab("Observed Lapse Rate") +
  xlab("Predicted Lapse Probability (Bin Midpoint)") +
  facet_grid(~factor(method, levels=c('prob_raw','prob_logi'),
                     labels = c("Raw (Uncalibrated) Probability",
                                "Logistic (Calibrated) Probability"))) +
  scale_y_continuous(breaks = seq(0,1, by = .1),
                     limits = seq(0,1)) +
  scale_x_continuous(breaks = seq(0,1, by = .1),
                     limits = seq(0,1)) +
  theme_classic() +
  theme(legend.position="none")
```

```{r}
cols <- c("prob_raw" = "#FF9898FF", "prob_logi" = "#A91E45FF")

probs |>
  mutate(.pred_lapse = .pred_Lapse) |>
  filter(method == "prob_logi") |> 
  cal_plot_breaks(truth = label, 
                  estimate = .pred_lapse,
                  .by = method) +
  scale_color_manual(values = "#A91E45FF",
                     aesthetics = c("color", "fill")) +
  ylab("Observed Lapse Rate") +
  xlab("Predicted Lapse Probability (Bin Midpoint)") +
  facet_grid(~factor(method, levels=c('prob_logi'),
                     labels = c("Logistic (Calibrated) Probability"))) +
  scale_y_continuous(breaks = seq(0,1, by = .1),
                     limits = seq(0,1)) +
  scale_x_continuous(breaks = seq(0,1, by = .1),
                     limits = seq(0,1)) +
  theme_classic() +
  theme(legend.position="none")
```
