---
title: "Make GPS Maps"
author: "Claire Punturieri"
date: "`r lubridate::today()`"
format: 
  html:
    toc: true
    toc_depth: 4
    embed-resources: true
editor_options: 
  chunk_output_type: console
---

# Housekeeping

## Code Status

This script serves as a placeholder until CP transfers this code into the data
wrangling codebook. Compiled 6/2024.

## Set up

## Environment
```{r}
#| message: false
#| warning: false

options(conflicts.policy = "depends.ok")
devtools::source_url("https://github.com/jjcurtin/lab_support/blob/main/format_path.R?raw=true", 
                      sha1 = "a58e57da996d1b70bb9a5b58241325d6fd78890f")
```

### Paths
```{r}
path_shared <- format_path("studydata/risk/data_processed/shared")
path_gps <- format_path("studydata/risk/data_processed/gps")
path_maps <- format_path("studydata/risk/data_processed/gps/subject-maps")
path_notes <- format_path("GitHub/analysis_risk/shared/notes")
```

## Packages and plot settings
```{r}
#| message: false
#| warning: false

library(tidyverse)
library(readxl)
library(geosphere)
library(lubridate)
library(XML)
library(kableExtra, exclude = c("group_rows"))
# for maps
## static maps
library(ggmap)
register_stadiamaps("d4bd71d7-556a-4627-9515-ef6e96823ce3")
## dynamic maps
library(moveVis) #this package might have deprecated, look into if making more animated maps
library(raster, exclude = c("select"))
library(move)

# load in helpful lab functions
devtools::source_url("https://github.com/jjcurtin/lab_support/blob/main/fun_plots.R?raw=true",
  sha1 = "def6ce26ed7b2493931fde811adff9287ee8d874"
)
devtools::source_url("https://github.com/jjcurtin/lab_support/blob/main/fun_eda.R?raw=true",
 sha1 = "c045eee2655a18dc85e715b78182f176327358a7"
)

# adjust plot visuals
theme_set(theme_classic())
options(tibble.width = Inf, dplyr.print_max = Inf)
```

## GPS maps

Other map options we might be interested in generating for QC are interactive ones where you can move around (see Figure 1: https://journals.sagepub.com/doi/full/10.1177/25152459221082680).

### Static

Create function to generate static map per subject.
```{r}
plot_geo <- function(z) {
    gps <- gps |> filter(subid == z)
    
    graph_title <- paste0("Subject ID", z, sep = " ")
   
    cbbox <- make_bbox(lon = gps$lon, lat = gps$lat, f = .1)
    sq_map <- get_map(location = cbbox, maptype = "stamen_toner_lite")
    
    ggmap(sq_map) + 
      geom_path(data = gps, aes(x = gps$lon, y = gps$lat), 
                size = 1, lineend = "round", color="darkred") +
      labs(x = " ", y = " ", title = graph_title) +
      theme_minimal() +
      theme(legend.position = "none")
}
```

Generate subject ID list.
```{r}
subid_all <- list(gps$subid) |> unlist() |> unique()
```

Generate individual GPS map per subject and save out in /shared/gps/subject-maps if compiled file does already not exist.
```{r}
#| eval: false
#| label: Static subject maps

if(file.exists(here::here(path_gps, "per-subj-geo.pdf"))){

  message("PDF file already exist -- delete to recreate!")

} else{
  geo_plots <- subid_all |> 
    map(\(subid) plot_geo(subid))
  
  output_file <- paste0(path_gps, "/per-subj-geo.pdf", sep = "")

  multi.page <- ggpubr::ggarrange(plotlist = geo_plots,
                                    nrow = 1, ncol = 1)

  ggpubr::ggexport(multi.page, filename = output_file)
}
```

### Dynamic

Create gifs displaying participant movement during study duration. Note: this takes a *long* time to run -- recommend subsetting data for a particular subject as opposed to generating map for entire duration on study.

```{r}
#| eval: false
#| label: Dynamic subject maps

gps_mini <- gps |> filter(subid == "1" & time < "2017-03-02 16:07:24")

gps_mini <- gps_mini[!duplicated(gps_mini$time),]

gps_mini_moves <- df2move(gps_mini,
        proj = "+init=epsg:4326 +proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0", 
        x = "lon", y = "lat", time = "time", track_id = "subid")

# align move_data to a uniform time scale
m <- align_move(gps_mini_moves, res = 4, unit = "mins")


frames <- frames_spatial(m, path_colours = c("darkred"),
                         map_service = "osm", map_type = "streets",
                         alpha = 0.5) |>  
  add_labels(x = "Longitude", y = "Latitude") |>
  add_northarrow() |>  
  add_scalebar() |> 
  add_timestamps(type = "label") |>  
  add_progress()

frames[[10]] # preview frame

# animate frames
animate_frames(frames, out_file = "moveVis.gif")
```