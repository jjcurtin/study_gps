---
title: "Check hyperparameters"
---

STILL NEED TO LOAD inner metrics and should find best model so we can see if the HP values are at edge 


### Plot hyperparameters

```{r}
# update algorithms to actual ones in the tibble
algorithms <- unique(metrics_avg$algorithm) 
feature_sets <- unique(metrics_avg$feature_set) 

for (k in algorithms) {
  
  results_k <- metrics_avg %>% 
      filter(algorithm == k)
  
  for (i in feature_sets) {
  
    results_i <- results_k %>% 
      filter(feature_set == i)
    
    
    # glmnet
    if (k == "glmnet") {
  
      plot_title <- str_c("Plotting glmnet hyperparameters for ", i, " feature set")
  
  
      plot_i <- results_i %>%
        mutate(hp1 = factor(hp1, ordered = TRUE),
               resample = case_when(resample == "none" ~ "none_none",
                                    TRUE ~ resample)) %>% 
        separate(resample, c("resample", "under_ratio"), "_") %>% 
        mutate(under_ratio = factor(under_ratio)) %>% 
        ggplot(mapping = aes(x = log(hp2), 
                         y = roc_auc, 
                         group = hp1, 
                         color = hp1)) +
          geom_line() +
          facet_grid(under_ratio ~ resample) +
          scale_color_discrete(name = "mixture (alpha)") +
          labs(title = plot_title, x = "penalty (lambda)", y = "ROC AUC")
  
      print(plot_i)
    }


    # random forest
    if (k == "random_forest") {
      
      plot_title <- str_c("Plotting RF hyperparameters for ", i, " feature set")
      
      plot_i <- results_i %>%
        mutate(hp2 = factor(hp2, ordered = TRUE)) %>% 
        separate(resample, c("resample", "under_ratio"), "_") %>% 
        mutate(under_ratio = factor(under_ratio)) %>% 
        ggplot(mapping = aes(x = hp1, 
                         y = roc_auc, 
                         group = hp2, 
                         color = hp2)) +
          geom_line() +
          facet_grid(under_ratio ~ resample) +
          scale_color_discrete(name = "min n") +
          labs(title = plot_title, x = "mtry", y = "ROC AUC")
      
       print(plot_i)
    }  
    
    # XGBoost
    if (k == "xgboost") {
      
      # hp1 x axis
            plot_title <- str_c("Plotting XGBoost hyperparameters for ", i, " feature set and DOWNSAMPLE")
      plot_i <- results_i %>%
        mutate(log_hp1 = factor(log10(hp1)), # prob have to change this to factor
               hp2 = factor(hp2, ordered = TRUE),
               hp3 = factor(hp3, ordered = TRUE),
               resample = factor(resample)) %>% 
        filter(str_detect(resample, "down")) %>% 
        ggplot(mapping = aes(x = log_hp1, 
                         y = median_roc_auc, 
                         group = hp3, 
                         color = hp3)) +
          geom_line() +
          facet_grid(resample ~ hp2) +
          scale_color_discrete(name = "mtry") +
          labs(title = plot_title, x = "log10 learning rate", y = "ROC AUC")
      
       print(plot_i)
       
      plot_title <- str_c("Plotting XGBoost hyperparameters for ", i, " feature set and UPSAMPLE")
      plot_i <- results_i %>%
        mutate(log_hp1 = factor(log10(hp1)),
               hp2 = factor(hp2, ordered = TRUE),
               hp3 = factor(hp3, ordered = TRUE),
               resample = factor(resample)) %>% 
        filter(str_detect(resample, "up")) %>% 
        ggplot(mapping = aes(x = log_hp1, 
                         y = median_roc_auc, 
                         group = hp3, 
                         color = hp3)) +
          geom_line() +
          facet_grid(resample ~ hp2) +
          scale_color_discrete(name = "mtry") +
          labs(title = plot_title, x = "log10 learning rate", y = "ROC AUC")
      
       print(plot_i)
       
        plot_title <- str_c("Plotting XGBoost hyperparameters for ", i, " feature set and NO RESAMPLING")
      plot_i <- results_i %>%
        mutate(log_hp1 = factor(log10(hp1)),
               hp2 = factor(hp2, ordered = TRUE),
               hp3 = factor(hp3, ordered = TRUE),
               resample = factor(resample)) %>% 
        filter(str_detect(resample, "none")) %>% 
        ggplot(mapping = aes(x = log_hp1, 
                         y = median_roc_auc, 
                         group = hp3, 
                         color = hp3)) +
          geom_line() +
          facet_grid(resample ~ hp2) +
          scale_color_discrete(name = "mtry") +
          labs(title = plot_title, x = "log10 learning rate", y = "ROC AUC")
      
       print(plot_i)
      
      # hp2 x axis
      
      plot_title <- str_c("Plotting XGBoost hyperparameters for ", i, " feature set and DOWNSAMPLE")
      plot_i <- results_i %>%
        mutate(log_hp1 = factor(log10(hp1)), # prob have to change this to factor
               hp2 = factor(hp2, ordered = TRUE),
               hp3 = factor(hp3, ordered = TRUE),
               resample = factor(resample)) %>% 
        filter(str_detect(resample, "down")) %>% 
        ggplot(mapping = aes(x = hp2, 
                         y = median_roc_auc, 
                         group = log_hp1, 
                         color = log_hp1)) +
          geom_line() +
          facet_grid(resample ~ hp3) +
          scale_color_discrete(name = "log10 learning rate") +
          labs(title = plot_title, x = "tree depth", y = "ROC AUC")
      
       print(plot_i)
       
      plot_title <- str_c("Plotting XGBoost hyperparameters for ", i, " feature set and UPSAMPLE")
      plot_i <- results_i %>%
        mutate(log_hp1 = factor(log10(hp1)),
               hp2 = factor(hp2, ordered = TRUE),
               hp3 = factor(hp3, ordered = TRUE),
               resample = factor(resample)) %>% 
        filter(str_detect(resample, "up")) %>% 
        ggplot(mapping = aes(x = hp2, 
                         y = median_roc_auc, 
                         group = log_hp1, 
                         color = log_hp1)) +
          geom_line() +
          facet_grid(resample ~ hp3) +
          scale_color_discrete(name = "log10 learning rate") +
          labs(title = plot_title, x = "tree depth", y = "ROC AUC")
      
       print(plot_i)
       
        plot_title <- str_c("Plotting XGBoost hyperparameters for ", i, " feature set and NO RESAMPLING")
      plot_i <- results_i %>%
        mutate(log_hp1 = factor(log10(hp1)),
               hp2 = factor(hp2, ordered = TRUE),
               hp3 = factor(hp3, ordered = TRUE),
               resample = factor(resample)) %>% 
        filter(str_detect(resample, "none")) %>% 
        ggplot(mapping = aes(x = hp2, 
                         y = median_roc_auc, 
                         group = log_hp1, 
                         color = log_hp1)) +
          geom_line() +
          facet_grid(resample ~ hp3) +
          scale_color_discrete(name = "log10 learning rate") +
          labs(title = plot_title, x = "tree depth", y = "ROC AUC")
      
       print(plot_i)
       
       # hp3 x axis
    plot_title <- str_c("Plotting XGBoost hyperparameters for ", i, " feature set and DOWNSAMPLE")
      plot_i <- results_i %>%
        mutate(log_hp1 = factor(log10(hp1)), # prob have to change this to factor
               hp2 = factor(hp2, ordered = TRUE),
               hp3 = factor(hp3, ordered = TRUE),
               resample = factor(resample)) %>% 
        filter(str_detect(resample, "down")) %>% 
        ggplot(mapping = aes(x = hp3, 
                         y = median_roc_auc, 
                         group = hp2, 
                         color = hp2)) +
          geom_line() +
          facet_grid(resample ~ log_hp1) +
          scale_color_discrete(name = "tree depth") +
          labs(title = plot_title, x = "mtry", y = "ROC AUC")
      
       print(plot_i)
       
      plot_title <- str_c("Plotting XGBoost hyperparameters for ", i, " feature set and UPSAMPLE")
      plot_i <- results_i %>%
        mutate(log_hp1 = factor(log10(hp1)),
               hp2 = factor(hp2, ordered = TRUE),
               hp3 = factor(hp3, ordered = TRUE),
               resample = factor(resample)) %>% 
        filter(str_detect(resample, "up")) %>% 
        ggplot(mapping = aes(x = hp3, 
                         y = median_roc_auc, 
                         group = hp2, 
                         color = hp2)) +
          geom_line() +
          facet_grid(resample ~ log_hp1) +
          scale_color_discrete(name = "tree depth") +
          labs(title = plot_title, x = "mtry", y = "ROC AUC")
      
       print(plot_i)
       
        plot_title <- str_c("Plotting XGBoost hyperparameters for ", i, " feature set and NO RESAMPLING")
      plot_i <- results_i %>%
        mutate(log_hp1 = factor(log10(hp1)),
               hp2 = factor(hp2, ordered = TRUE),
               hp3 = factor(hp3, ordered = TRUE),
               resample = factor(resample)) %>% 
        filter(str_detect(resample, "none")) %>% 
        ggplot(mapping = aes(x = hp3, 
                         y = median_roc_auc, 
                         group = hp2, 
                         color = hp2)) +
          geom_line() +
          facet_grid(resample ~ log_hp1) +
          scale_color_discrete(name = "tree depth") +
          labs(title = plot_title, x = "mtry", y = "ROC AUC")
      
       print(plot_i)
    }  
    
    # rda
    if (k == "rda") {
      
      plot_title <- str_c("Plotting RDA hyperparameters for ", i, " feature set")
      
      plot_i <- results_i %>%
        mutate(hp2 = factor(hp2, ordered = TRUE),
               resample = case_when(resample == "none" ~ "none_none",
                                    TRUE ~ resample)) %>% 
        separate(resample, c("resample", "under_ratio"), "_") %>% 
        mutate(under_ratio = factor(under_ratio)) %>% 
        ggplot(mapping = aes(x = hp1, 
                         y = roc_auc, 
                         group = hp2, 
                         color = hp2)) +
          geom_line() +
          facet_grid(under_ratio ~ resample) +
          scale_color_discrete(name = "frac identity matrix") +
          labs(title = plot_title, x = "frac common cov", y = "ROC AUC")
      
       print(plot_i)
    }  
    
     # nnet
    if (k == "nnet") {
      
      plot_title <- str_c("Plotting nnet hyperparameters for ", i, " feature set and DOWNSAMPLE by HIDDEN UNITS")
      plot_i <- results_i %>%
        mutate(hp2 = factor(hp2, ordered = TRUE),
               hp3 = factor(hp3, ordered = TRUE),
               resample = factor(resample)) %>% 
        filter(str_detect(resample, "down")) %>% 
        ggplot(mapping = aes(x = hp1, 
                         y = roc_auc, 
                         group = hp2, 
                         color = hp2)) +
          geom_line() +
          facet_grid(resample ~ hp3) +
          scale_color_discrete(name = "penalty") +
          labs(title = plot_title, x = "epochs", y = "ROC AUC")
      
       print(plot_i)
       
      plot_title <- str_c("Plotting nnet hyperparameters for ", i, " feature set and UPSAMPLE by HIDDEN UNITS")
      plot_i <- results_i %>%
        mutate(hp2 = factor(hp2, ordered = TRUE),
               hp3 = factor(hp3, ordered = TRUE),
               resample = factor(resample)) %>% 
        filter(str_detect(resample, "down")) %>% 
        ggplot(mapping = aes(x = hp1, 
                         y = roc_auc, 
                         group = hp2, 
                         color = hp2)) +
          geom_line() +
          facet_grid(resample ~ hp3) +
          scale_color_discrete(name = "penalty") +
          labs(title = plot_title, x = "epochs", y = "ROC AUC")
      
       print(plot_i)
  
    
    plot_title <- str_c("Plotting nnet hyperparameters for ", i, " feature set and NO RESAMPLING by HIDDEN UNITS")
      plot_i <- results_i %>%
        mutate(hp2 = factor(hp2, ordered = TRUE),
               hp3 = factor(hp3, ordered = TRUE),
               resample = factor(resample)) %>% 
        filter(str_detect(resample, "none")) %>% 
        ggplot(mapping = aes(x = hp1, 
                         y = roc_auc, 
                         group = hp2, 
                         color = hp2)) +
          geom_line() +
          facet_grid(resample ~ hp3) +
          scale_color_discrete(name = "penalty") +
          labs(title = plot_title, x = "epochs", y = "ROC AUC")
      
       print(plot_i)
    } 
  }
}
```
