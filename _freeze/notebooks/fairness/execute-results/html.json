{
  "hash": "806dc105f1caf500334362f87b927c2a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Subgroup Analysis\"\nauthor: \"Coco Yu, modified by Claire Punturieri\"\ndate: \"2024-10-22\"\noutput: \n  html_document:\n    toc: true \n    toc_depth: 4\nformat:\n  html:\n    embed-resources: true\nparams:\n  study: \"gps\"\n  window: \"1day\"\n  version: \"v6\"\n  cv: \"nested_1_x_10_3_x_10\"\n  algorithms: \"xgboost\"   # \"all\" or name of specific algorithm\n  model: \"main\"\neditor_options: \n  chunk_output_type: console\n---\n\n\n# Housekeeping\n\n## Code status\n\n## Notes\n\n\n# Set Up\n\n## Set Up Environment\n\n### Study parameters\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nstudy <- params$study\ncv <- params$cv\nalgorithms <- params$algorithms\nversion <- params$version\nwindow <- params$window\nmodel <- params$model\n```\n:::\n\n\n### Defaults\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n#| message: false\n#| warning: false\n\n# handle conflicts\noptions(conflicts.policy = \"depends.ok\")\ndevtools::source_url(\"https://github.com/jjcurtin/lab_support/blob/main/fun_ml.R?raw=true\")\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nℹ SHA-1 hash of file is \"77e91675366f10788c6bcb59fa1cfc9ee0c75281\"\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\n#| message: false\n#| warning: false\n\ntidymodels_conflictRules()\n\nknitr::opts_chunk$set(attr.output='style=\"max-height: 500px;\"')\n\noptions(tibble.width = Inf)\noptions(tibble.print_max = Inf)\n```\n:::\n\n\n### Packages for script\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n#| message: false\n#| warning: false\n\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\n#| message: false\n#| warning: false\n\nlibrary(tidyposterior)\nlibrary(tidymodels)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n── Attaching packages ────────────────────────────────────── tidymodels 1.2.0 ──\n✔ broom        1.0.6     ✔ rsample      1.2.1\n✔ dials        1.3.0     ✔ tune         1.2.1\n✔ infer        1.0.7     ✔ workflows    1.1.4\n✔ modeldata    1.4.0     ✔ workflowsets 1.1.0\n✔ parsnip      1.2.1     ✔ yardstick    1.3.1\n✔ recipes      1.1.0     \n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n• Use suppressPackageStartupMessages() to eliminate package startup messages\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\n#| message: false\n#| warning: false\n\nlibrary(yardstick)\n\ntheme_set(theme_classic())\n\ndevtools::source_url(\"https://github.com/jjcurtin/lab_support/blob/main/format_path.R?raw=true\")\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nℹ SHA-1 hash of file is \"a58e57da996d1b70bb9a5b58241325d6fd78890f\"\n```\n\n\n:::\n:::\n\n\n\n### Absolute paths\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\npath_models <- format_path(str_c(\"studydata/risk/models/\", study))\npath_gps <- format_path(str_c(\"studydata/risk/data_processed/\", study))\npath_shared <- format_path(str_c(\"studydata/risk/data_processed/shared\"))\n```\n:::\n\n\n## Data Cleaning\n\nRead in Data\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nprobs <- read_rds(here::here(path_models, str_c(\"inner_preds_\", window, \"_\", version, \"_\",\n                                         cv, \"_\", model, \".rds\"))) |> \n  #pivot_longer(cols = starts_with(\"prob\"), \n               #names_to = \"method\", \n               #values_to = \".pred_Lapse\") |>\n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{style=\"max-height: 500px;\"}\nRows: 310,797\nColumns: 7\n$ id_obs          <int> 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456,…\n$ outer_split_num <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ inner_split_num <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ prob_raw        <dbl> 0.3209265, 0.3209265, 0.3373791, 0.3209265, 0.3209265,…\n$ prob_iso        <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ prob_logi       <dbl> 0.08943453, 0.08943453, 0.07479958, 0.08943453, 0.0894…\n$ label           <fct> no lapse, no lapse, no lapse, no lapse, no lapse, no l…\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlabels <- read_csv(here::here(path_gps, \"labels.csv\"), col_types = cols()) |> \n  mutate(day_start = as_datetime(day_start, tz = \"America/Chicago\"),\n         day_end = as_datetime(day_end, tz = \"America/Chicago\"))\n\nlabels$id_obs <- 1: nrow(labels)\n\nscreen <- read_csv(here::here(path_shared, \"screen.csv\"),\n                   col_types = cols()) |>\n  select(c(starts_with(\"dem\"), subid)) |> \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{style=\"max-height: 500px;\"}\nRows: 208\nColumns: 16\n$ dem_1   <dbl> 57, 35, 22, 39, 22, 38, 22, 38, 25, 45, 63, 50, 53, 26, 52, 54…\n$ dem_2   <chr> \"Male\", \"Female\", \"Female\", \"Male\", \"Male\", \"Male\", \"Female\", …\n$ dem_3   <chr> \"White/Caucasian\", \"White/Caucasian\", \"White/Caucasian\", \"Whit…\n$ dem_3_1 <chr> NA, NA, NA, NA, NA, NA, NA, NA, \"Filipino and Black\", NA, NA, …\n$ dem_4   <chr> \"No, I am not of Hispanic, Latino, or Spanish origin\", \"No, I …\n$ dem_4_1 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ dem_5   <chr> \"College degree\", \"2-Year degree\", \"High school or GED\", \"Coll…\n$ dem_6   <chr> \"Unemployed\", \"Employed\", \"Employed\", \"Employed\", \"Employed\", …\n$ dem_6_1 <chr> NA, \"Full-time\", \"Full-time\", \"Full-time\", \"Part-time\", \"Full-…\n$ dem_7   <dbl> 12000, 36920, 20064, 130000, 5000, 70000, 8000, 57000, 10000, …\n$ dem_8   <chr> \"Never Married\", \"Never Married\", \"Never Married\", \"Married\", …\n$ dem2_2  <dbl> 2, 2, 4, 1, 2, 1, 4, 2, 2, 2, 0, 2, 3, 2, 1, 0, 2, 2, 2, 1, 2,…\n$ dem2_4  <dbl> 0, 1, 0, 1, NA, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0…\n$ dem2_6  <dbl> 0, 4, 0, 2, NA, NA, 0, 2, 0, 2, 1, 2, 0, 0, 1, 0, 0, 0, 2, 0, …\n$ dem2_8  <dbl> 0, 0, 0, NA, NA, NA, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ subid   <dbl> 1, 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 9, 18, 19…\n```\n\n\n:::\n:::\n\n\nFind demographic groups\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\ndemographics <- labels |> \n  left_join(screen, by = \"subid\") |> \n  select(-day_start, -day_end, -lapse) |> \n  distinct() |>\n  mutate(\n    race = case_when(\n      dem_3 == \"White/Caucasian\" & grepl(\"No\", dem_4) ~ \"white\",\n      dem_3 != \"White/Caucasian\" | grepl(\"Yes\", dem_4) ~ \"non_white\"),\n    sex = if_else(dem_2 == \"Female\", \"female\", \"male\"),\n    age = if_else(dem_1 >= 55, \"older\", \"younger\"),\n    income = if_else(dem_7 <= .5 * 30000, \"below_poverty\", \"above_poverty\")\n  ) |> \n  select(-starts_with(\"dem\")) |> \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{style=\"max-height: 500px;\"}\nRows: 11,511\nColumns: 6\n$ subid  <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ id_obs <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, …\n$ race   <chr> \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", …\n$ sex    <chr> \"male\", \"male\", \"male\", \"male\", \"male\", \"male\", \"male\", \"male\",…\n$ age    <chr> \"older\", \"older\", \"older\", \"older\", \"older\", \"older\", \"older\", …\n$ income <chr> \"below_poverty\", \"below_poverty\", \"below_poverty\", \"below_pover…\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nprobs <- probs |> \n  left_join(demographics, by = \"id_obs\")\n```\n:::\n\n\n## Calculate auROC\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nauroc_all <- probs |> \n  group_by(inner_split_num, outer_split_num) |> \n  summarize(auroc = roc_auc(cur_data(), prob_logi, truth = label)$.estimate)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: There was 1 warning in `summarize()`.\nℹ In argument: `auroc = roc_auc(cur_data(), prob_logi, truth =\n  label)$.estimate`.\nℹ In group 1: `inner_split_num = 1` and `outer_split_num = 1`.\nCaused by warning:\n! `cur_data()` was deprecated in dplyr 1.1.0.\nℹ Please use `pick()` instead.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`summarise()` has grouped output by 'inner_split_num'. You can override using\nthe `.groups` argument.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nauroc_race <- probs |> \n  group_by(inner_split_num, outer_split_num, race) |> \n  summarize(auroc = roc_auc(cur_data(), prob_logi, truth = label)$.estimate) |> \n  ungroup() |> \n  rename(subgroup = race)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: There were 52 warnings in `summarize()`.\nThe first warning was:\nℹ In argument: `auroc = roc_auc(cur_data(), prob_logi, truth =\n  label)$.estimate`.\nℹ In group 16: `inner_split_num = 1`, `outer_split_num = 9`, `race =\n  \"non_white\"`.\nCaused by warning:\n! No event observations were detected in `truth` with event level 'lapse'.\nℹ Run `dplyr::last_dplyr_warnings()` to see the 51 remaining warnings.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`summarise()` has grouped output by 'inner_split_num', 'outer_split_num'. You\ncan override using the `.groups` argument.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nauroc_sex <- probs |> \n  group_by(inner_split_num, outer_split_num, sex) |> \n  summarize(auroc = roc_auc(cur_data(), prob_logi, truth = label)$.estimate) |> \n  ungroup() |> \n  bind_rows(auroc_all |> mutate(sex = \"all\")) |> \n  rename(subgroup = sex)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: There were 3 warnings in `summarize()`.\nThe first warning was:\nℹ In argument: `auroc = roc_auc(cur_data(), prob_logi, truth =\n  label)$.estimate`.\nℹ In group 94: `inner_split_num = 2`, `outer_split_num = 17`, `sex = \"male\"`.\nCaused by warning:\n! No event observations were detected in `truth` with event level 'lapse'.\nℹ Run `dplyr::last_dplyr_warnings()` to see the 2 remaining warnings.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`summarise()` has grouped output by 'inner_split_num', 'outer_split_num'. You\ncan override using the `.groups` argument.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nauroc_age <- probs |> \n  group_by(inner_split_num, outer_split_num, age) |> \n  summarize(auroc = roc_auc(cur_data(), prob_logi, truth = label)$.estimate) |>\n  ungroup() |> \n  bind_rows(auroc_all |> mutate(age = \"all\")) |> \n  rename(subgroup = age)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: There were 40 warnings in `summarize()`.\nThe first warning was:\nℹ In argument: `auroc = roc_auc(cur_data(), prob_logi, truth =\n  label)$.estimate`.\nℹ In group 13: `inner_split_num = 1`, `outer_split_num = 8`, `age = \"older\"`.\nCaused by warning:\n! No event observations were detected in `truth` with event level 'lapse'.\nℹ Run `dplyr::last_dplyr_warnings()` to see the 39 remaining warnings.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`summarise()` has grouped output by 'inner_split_num', 'outer_split_num'. You\ncan override using the `.groups` argument.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nauroc_income <- probs |> \n  group_by(inner_split_num, outer_split_num, income) |> \n  summarize(auroc = roc_auc(cur_data(), prob_logi, truth = label)$.estimate) |>\n  ungroup() |> \n  bind_rows(auroc_all |> mutate(income = \"all\")) |> \n  rename(subgroup = income)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: There were 14 warnings in `summarize()`.\nThe first warning was:\nℹ In argument: `auroc = roc_auc(cur_data(), prob_logi, truth =\n  label)$.estimate`.\nℹ In group 90: `inner_split_num = 2`, `outer_split_num = 15`, `income =\n  \"below_poverty\"`.\nCaused by warning:\n! No event observations were detected in `truth` with event level 'lapse'.\nℹ Run `dplyr::last_dplyr_warnings()` to see the 13 remaining warnings.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`summarise()` has grouped output by 'inner_split_num', 'outer_split_num'. You\ncan override using the `.groups` argument.\n```\n\n\n:::\n:::\n\n\n## Model Comparison\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n# contrast_table <- function(df, levels){\n#   df |> \n#     filter(subgroup != \"all\") |>\n#     select(c(\"auroc\", \"subgroup\", \"inner_split_num\", \"outer_split_num\")) |> \n#     group_by(subgroup) |>\n#     pivot_wider(values_from = c(\"auroc\"), names_from = subgroup) |>\n#     rename(id = outer_split_num, id2 = inner_split_num) |>\n#     perf_mod(formula = statistic ~ model + (1 | id/id2),\n#              # prior_intercept = rstanarm::student_t(autoscale = TRUE),\n#              # prior = rstanarm::student_t(autoscale = TRUE),\n#              # transform = tidyposterior::logit_trans,  # for skewed & bounded AUC\n#              # iter = 2000, chains = 4,\n#              adapt_delta = .99,\n#              # cores = 4, seed = 12345,\n#              family = gaussian, verbose = FALSE) |> \n#     contrast_models(list_1 = levels[1], list_2 = levels[2]) |> \n#     summary(size = 0) |> \n#     mutate(metrics = \"auroc\", .before = contrast)\n#   }\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n# contrast_table(auroc_race, c(\"white\", \"non_white\"))\n# contrast_table(auroc_sex, c(\"male\", \"female\"))\n# contrast_table(auroc_age, c(\"younger\", \"older\"))\n# contrast_table(auroc_income, c(\"above_poverty\", \"below_poverty\"))\n```\n:::\n\n\n## CY figure\n\nPlots\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n# auroc_plot <- auroc_race |> \n#   mutate(group = \"race\") |> \n#   bind_rows(auroc_sex |> mutate(group = \"sex\")) |> \n#   bind_rows(auroc_age |> mutate(group = \"age\")) |> \n#   bind_rows(auroc_income |> mutate(group = \"income\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n# ggpubr::ggarrange(\n#   auroc_race |> \n#     ggplot(aes(x = factor(subgroup, levels = c(\"all\", \"white\", \"non_white\")), \n#                y = auroc, fill = subgroup)) +\n#     geom_boxplot() +\n#     theme(legend.position = \"none\", axis.text.x = element_text(angle = 10)) +\n#     scale_fill_manual(values = c(\"#80B1D3\", \"#B5D66E\", \"#F28072\")) +\n#     ylim(0, 1) +\n#     labs(x = \"Race\"),\n#   auroc_sex |> \n#     ggplot(aes(x = factor(subgroup, levels = c(\"all\", \"male\", \"female\")),\n#                y = auroc, fill = subgroup)) +\n#     geom_boxplot() +\n#     theme(legend.position = \"none\", axis.text.x = element_text(angle = 10)) +\n#     scale_fill_manual(values = c(\"#80B1D3\", \"#B5D66E\", \"#F28072\")) +\n#     ylim(0, 1) +\n#     labs(x = \"Sex\"),\n#   auroc_age |> \n#     ggplot(aes(x = factor(subgroup, levels = c(\"all\", \"younger\", \"older\")),\n#                y = auroc, fill = subgroup)) +\n#     geom_boxplot() +\n#     theme(legend.position = \"none\", axis.text.x = element_text(angle = 10)) +\n#     scale_fill_manual(values = c(\"#80B1D3\", \"#B5D66E\", \"#F28072\")) +\n#     ylim(0, 1) +\n#     labs(x = \"Age\"),\n#   auroc_income |> \n#     ggplot(aes(x = factor(subgroup, levels = \n#                             c(\"all\", \"above_poverty\", \"below_poverty\")),\n#                y = auroc, fill = subgroup)) +\n#     geom_boxplot() +\n#     theme(legend.position = \"none\", axis.text.x = element_text(angle = 10)) +\n#     scale_fill_manual(values = c(\"#80B1D3\", \"#B5D66E\", \"#F28072\")) +\n#     ylim(0, 1) +\n#     labs(x = \"Income\")\n# )\n```\n:::\n\n\n## JC figure\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nposterior_auroc <- function(df, levels){\n  q = c(.025, .5, .975)\n\n  df |> \n    filter(subgroup != \"all\") |>\n    group_by(subgroup) |>\n    pivot_wider(values_from = auroc, names_from = subgroup) |>\n    rename(id = inner_split_num, id2 = outer_split_num) |>\n    perf_mod(formula = statistic ~ model + (1 | id2/id),\n             # prior_intercept = rstanarm::student_t(autoscale = TRUE),\n             # prior = rstanarm::student_t(autoscale = TRUE),\n             # transform = tidyposterior::logit_trans,  # for skewed & bounded AUC\n             # iter = 2000, chains = 4,\n             adapt_delta = .99,\n             # cores = 4, seed = 12345,\n             family = gaussian, verbose = FALSE)   |> \n    # output of this needs to go into contrast models\n    tidy(seed = 123) |> \n    group_by(model) |> \n    summarize(median = quantile(posterior, probs = q[2]),\n              lower = quantile(posterior, probs = q[1]), \n              upper = quantile(posterior, probs = q[3]))\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nci_sex <- posterior_auroc(auroc_sex, c(\"male\", \"female\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{style=\"max-height: 500px;\"}\n\nSAMPLING FOR MODEL 'continuous' NOW (CHAIN 1).\nChain 1: \nChain 1: Gradient evaluation took 0.000332 seconds\nChain 1: 1000 transitions using 10 leapfrog steps per transition would take 3.32 seconds.\nChain 1: Adjust your expectations accordingly!\nChain 1: \nChain 1: \nChain 1: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 1: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 1: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 1: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 1: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 1: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 1: \nChain 1:  Elapsed Time: 16.134 seconds (Warm-up)\nChain 1:                5.074 seconds (Sampling)\nChain 1:                21.208 seconds (Total)\nChain 1: \n\nSAMPLING FOR MODEL 'continuous' NOW (CHAIN 2).\nChain 2: \nChain 2: Gradient evaluation took 9e-05 seconds\nChain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.9 seconds.\nChain 2: Adjust your expectations accordingly!\nChain 2: \nChain 2: \nChain 2: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 2: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 2: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 2: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 2: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 2: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 2: \nChain 2:  Elapsed Time: 13.132 seconds (Warm-up)\nChain 2:                9.566 seconds (Sampling)\nChain 2:                22.698 seconds (Total)\nChain 2: \n\nSAMPLING FOR MODEL 'continuous' NOW (CHAIN 3).\nChain 3: \nChain 3: Gradient evaluation took 8.1e-05 seconds\nChain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.81 seconds.\nChain 3: Adjust your expectations accordingly!\nChain 3: \nChain 3: \nChain 3: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 3: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 3: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 3: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 3: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 3: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 3: \nChain 3:  Elapsed Time: 15.639 seconds (Warm-up)\nChain 3:                4.73 seconds (Sampling)\nChain 3:                20.369 seconds (Total)\nChain 3: \n\nSAMPLING FOR MODEL 'continuous' NOW (CHAIN 4).\nChain 4: \nChain 4: Gradient evaluation took 8e-05 seconds\nChain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.8 seconds.\nChain 4: Adjust your expectations accordingly!\nChain 4: \nChain 4: \nChain 4: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 4: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 4: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 4: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 4: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 4: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 4: \nChain 4:  Elapsed Time: 14.416 seconds (Warm-up)\nChain 4:                4.926 seconds (Sampling)\nChain 4:                19.342 seconds (Total)\nChain 4: \n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nci_race <- posterior_auroc(auroc_race, c(\"white\", \"non_white\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{style=\"max-height: 500px;\"}\n\nSAMPLING FOR MODEL 'continuous' NOW (CHAIN 1).\nChain 1: \nChain 1: Gradient evaluation took 0.000106 seconds\nChain 1: 1000 transitions using 10 leapfrog steps per transition would take 1.06 seconds.\nChain 1: Adjust your expectations accordingly!\nChain 1: \nChain 1: \nChain 1: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 1: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 1: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 1: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 1: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 1: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 1: \nChain 1:  Elapsed Time: 13.814 seconds (Warm-up)\nChain 1:                4.497 seconds (Sampling)\nChain 1:                18.311 seconds (Total)\nChain 1: \n\nSAMPLING FOR MODEL 'continuous' NOW (CHAIN 2).\nChain 2: \nChain 2: Gradient evaluation took 9.2e-05 seconds\nChain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.92 seconds.\nChain 2: Adjust your expectations accordingly!\nChain 2: \nChain 2: \nChain 2: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 2: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 2: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 2: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 2: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 2: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 2: \nChain 2:  Elapsed Time: 13.232 seconds (Warm-up)\nChain 2:                4.303 seconds (Sampling)\nChain 2:                17.535 seconds (Total)\nChain 2: \n\nSAMPLING FOR MODEL 'continuous' NOW (CHAIN 3).\nChain 3: \nChain 3: Gradient evaluation took 7.6e-05 seconds\nChain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.76 seconds.\nChain 3: Adjust your expectations accordingly!\nChain 3: \nChain 3: \nChain 3: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 3: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 3: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 3: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 3: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 3: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 3: \nChain 3:  Elapsed Time: 12.509 seconds (Warm-up)\nChain 3:                4.524 seconds (Sampling)\nChain 3:                17.033 seconds (Total)\nChain 3: \n\nSAMPLING FOR MODEL 'continuous' NOW (CHAIN 4).\nChain 4: \nChain 4: Gradient evaluation took 8.8e-05 seconds\nChain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.88 seconds.\nChain 4: Adjust your expectations accordingly!\nChain 4: \nChain 4: \nChain 4: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 4: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 4: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 4: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 4: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 4: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 4: \nChain 4:  Elapsed Time: 10.464 seconds (Warm-up)\nChain 4:                4.598 seconds (Sampling)\nChain 4:                15.062 seconds (Total)\nChain 4: \n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nci_income <- posterior_auroc(auroc_income, c(\"above_poverty\", \"below_poverty\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{style=\"max-height: 500px;\"}\n\nSAMPLING FOR MODEL 'continuous' NOW (CHAIN 1).\nChain 1: \nChain 1: Gradient evaluation took 9.4e-05 seconds\nChain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.94 seconds.\nChain 1: Adjust your expectations accordingly!\nChain 1: \nChain 1: \nChain 1: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 1: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 1: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 1: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 1: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 1: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 1: \nChain 1:  Elapsed Time: 14.848 seconds (Warm-up)\nChain 1:                5.007 seconds (Sampling)\nChain 1:                19.855 seconds (Total)\nChain 1: \n\nSAMPLING FOR MODEL 'continuous' NOW (CHAIN 2).\nChain 2: \nChain 2: Gradient evaluation took 7.9e-05 seconds\nChain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.79 seconds.\nChain 2: Adjust your expectations accordingly!\nChain 2: \nChain 2: \nChain 2: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 2: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 2: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 2: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 2: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 2: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 2: \nChain 2:  Elapsed Time: 15.279 seconds (Warm-up)\nChain 2:                4.98 seconds (Sampling)\nChain 2:                20.259 seconds (Total)\nChain 2: \n\nSAMPLING FOR MODEL 'continuous' NOW (CHAIN 3).\nChain 3: \nChain 3: Gradient evaluation took 7.9e-05 seconds\nChain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.79 seconds.\nChain 3: Adjust your expectations accordingly!\nChain 3: \nChain 3: \nChain 3: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 3: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 3: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 3: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 3: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 3: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 3: \nChain 3:  Elapsed Time: 16.201 seconds (Warm-up)\nChain 3:                9.339 seconds (Sampling)\nChain 3:                25.54 seconds (Total)\nChain 3: \n\nSAMPLING FOR MODEL 'continuous' NOW (CHAIN 4).\nChain 4: \nChain 4: Gradient evaluation took 0.000117 seconds\nChain 4: 1000 transitions using 10 leapfrog steps per transition would take 1.17 seconds.\nChain 4: Adjust your expectations accordingly!\nChain 4: \nChain 4: \nChain 4: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 4: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 4: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 4: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 4: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 4: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 4: \nChain 4:  Elapsed Time: 14.56 seconds (Warm-up)\nChain 4:                9.183 seconds (Sampling)\nChain 4:                23.743 seconds (Total)\nChain 4: \n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nci_age  <-posterior_auroc(auroc_age, c(\"younger\", \"older\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{style=\"max-height: 500px;\"}\n\nSAMPLING FOR MODEL 'continuous' NOW (CHAIN 1).\nChain 1: \nChain 1: Gradient evaluation took 8.8e-05 seconds\nChain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.88 seconds.\nChain 1: Adjust your expectations accordingly!\nChain 1: \nChain 1: \nChain 1: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 1: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 1: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 1: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 1: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 1: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 1: \nChain 1:  Elapsed Time: 11.806 seconds (Warm-up)\nChain 1:                4.403 seconds (Sampling)\nChain 1:                16.209 seconds (Total)\nChain 1: \n\nSAMPLING FOR MODEL 'continuous' NOW (CHAIN 2).\nChain 2: \nChain 2: Gradient evaluation took 7.6e-05 seconds\nChain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.76 seconds.\nChain 2: Adjust your expectations accordingly!\nChain 2: \nChain 2: \nChain 2: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 2: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 2: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 2: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 2: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 2: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 2: \nChain 2:  Elapsed Time: 14.183 seconds (Warm-up)\nChain 2:                4.408 seconds (Sampling)\nChain 2:                18.591 seconds (Total)\nChain 2: \n\nSAMPLING FOR MODEL 'continuous' NOW (CHAIN 3).\nChain 3: \nChain 3: Gradient evaluation took 7.5e-05 seconds\nChain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.75 seconds.\nChain 3: Adjust your expectations accordingly!\nChain 3: \nChain 3: \nChain 3: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 3: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 3: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 3: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 3: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 3: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 3: \nChain 3:  Elapsed Time: 14.335 seconds (Warm-up)\nChain 3:                4.393 seconds (Sampling)\nChain 3:                18.728 seconds (Total)\nChain 3: \n\nSAMPLING FOR MODEL 'continuous' NOW (CHAIN 4).\nChain 4: \nChain 4: Gradient evaluation took 0.000113 seconds\nChain 4: 1000 transitions using 10 leapfrog steps per transition would take 1.13 seconds.\nChain 4: Adjust your expectations accordingly!\nChain 4: \nChain 4: \nChain 4: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 4: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 4: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 4: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 4: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 4: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 4: \nChain 4:  Elapsed Time: 16.174 seconds (Warm-up)\nChain 4:                4.401 seconds (Sampling)\nChain 4:                20.575 seconds (Total)\nChain 4: \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nci <- ci_sex |> \n    bind_rows(ci_race) |> \n    bind_rows(ci_income) |> \n    bind_rows(ci_age)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nplot_ci <- function(d, title){\n  d |> \n    ggplot(aes(x = model, color = model)) +\n    geom_point(aes(y = median), size = 2) +\n    geom_errorbar(aes(ymin = lower, ymax = upper), width = .2) +\n      #width = .2, position = position_dodge(.9)) +\n    geom_hline(yintercept = .5, linetype = \"dotted\") +\n    coord_flip() +\n    ylab(\"auROC\") +\n    xlab(\"Group\") +\n    ggtitle(title) +\n    xlab(\"\") +\n    theme(legend.position = \"none\") +\n    scale_y_continuous(breaks = seq(0.45, 0.7, 0.05), limits = c(0.45, 0.7)) +\n    #scale_y_continuous(breaks = seq(0.4, 1.0, 0.10), limits = c(0.4, 1.0)) +\n    scale_color_manual(values = c(\"#7FBFFFFF\",\"#4C4CFFFF\"))\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nfig_sex  <- ci |>\n  filter(model == \"male\" | model == \"female\") |>\n  mutate(model = fct(model, levels = c(\"female\", \"male\")),\n         model = fct_recode(model, male = \"male\", female = \"female\")) |> \n  plot_ci(\"Sex\")\n\nfig_race  <- ci |>\n  filter(model == \"white\" | model == \"non_white\") |>\n  mutate(model = fct(model, levels = c(\"non_white\", \"white\")),\n         model = fct_recode(model, white = \"white\", nonwhite = \"non_white\")) |> \n  plot_ci(\"Race/Ethnicity\")\n\nfig_income  <- ci |>\n  filter(model == \"above_poverty\" | model == \"below_poverty\") |>\n  mutate(model = fct(model, levels = c(\"below_poverty\", \"above_poverty\")),\n         model = fct_recode(model, `above poverty` = \"above_poverty\", `below poverty` = \"below_poverty\")) |> \n  plot_ci(\"Income\")\n  \nfig_age  <- ci |>\n  filter(model == \"younger\" | model == \"older\") |>\n  mutate(model = fct(model, levels = c(\"older\", \"younger\"))) |> \n  plot_ci(\"Age\")\n```\n:::\n\n::: {#cell-fig-fairness-subgroups .cell}\n\n```{.r .cell-code .hidden}\n#| label: fig-fairness-subgroups\n#| fig-cap: 95% credible intervals across posterior probability distributions by subgroup at differential levels of privilege.\n#| fig-height: 4\n#| fig-width: 6\n\ncowplot::plot_grid(fig_race, fig_sex, fig_age, fig_income, align=\"v\", scale = 0.95)\n```\n\n::: {.cell-output-display}\n![95% credible intervals across posterior probability distributions by subgroup at differential levels of privilege.](fairness_files/figure-html/fig-fairness-subgroups-1.png){#fig-fairness-subgroups width=576}\n:::\n:::\n",
    "supporting": [
      "fairness_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}